{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nconst template = require(\"babel-template\");\nmodule.exports = function ({types: t}) {\n\n    const buildRequire = template(`const IMPORT_NAME = require(SOURCE);`);\n    const ast = buildRequire({\n        IMPORT_NAME: t.identifier(\"assert\"),\n        SOURCE: t.stringLiteral(\"assert\")\n    });\n\n    function addAssertImport(file) {\n        file.path.unshiftContainer('body', [ast])\n    }\n\n\n    function isRequireAssert(callee, arg) {\n        if (!callee.isIdentifier() || !callee.equals(\"name\", \"require\")) {\n            return false;\n        }\n        return arg.isLiteral();\n    }\n\n    return {\n        visitor: {\n            AssignmentExpression: {\n                enter: function (nodePath, state) {\n                    if (!nodePath.equals(\"operator\", \"=\")) {\n                        return;\n                    }\n                    var left = nodePath.get(\"left\");\n                    if (!left.isIdentifier()) {\n                        return;\n                    }\n                    if (!left.equals(\"name\", \"assert\")) {\n                        return;\n                    }\n                    var right = nodePath.get(\"right\");\n                    if (!right.isCallExpression()) {\n                        return;\n                    }\n                    var callee = right.get(\"callee\");\n                    var arg = right.get(\"arguments\")[0];\n                    if (isRequireAssert(callee, arg)) {\n                        state.set(\"__AUTO_IMPORT_ASSERT_Already_imported\", true)\n                    }\n                }\n            },\n            VariableDeclarator: {\n                enter: function (nodePath, state) {\n                    var id = nodePath.get(\"id\");\n                    if (!id.isIdentifier()) {\n                        return;\n                    }\n                    if (!id.equals(\"name\", \"assert\")) {\n                        return;\n                    }\n                    var init = nodePath.get(\"init\");\n                    if (!init.isCallExpression()) {\n                        return;\n                    }\n                    var callee = init.get(\"callee\");\n                    var arg = init.get(\"arguments\")[0];\n                    if (isRequireAssert(callee, arg)) {\n                        state.set(\"__AUTO_IMPORT_ASSERT_Already_imported\", true)\n                    }\n                }\n            },\n            ImportDeclaration: {\n                enter: function (nodePath, state) {\n                    var source = nodePath.get(\"source\");\n                    var firstSpecifier = nodePath.get(\"specifiers\")[0];\n                    if (!firstSpecifier.isImportDefaultSpecifier()) {\n                        return;\n                    }\n                    var local = firstSpecifier.get(\"local\");\n                    if (!(local.equals(\"name\", \"assert\"))) {\n                        return;\n                    }\n                    state.set(\"__AUTO_IMPORT_ASSERT_Already_imported\", true)\n                }\n            },\n            Program: {\n                exit: function (path, state) {\n                    const isAlreadyImported = state.get(\"__AUTO_IMPORT_ASSERT_Already_imported\");\n                    if (isAlreadyImported) {\n                        return\n                    }\n                    addAssertImport(state.file);\n                }\n            }\n        }\n    };\n};"]}